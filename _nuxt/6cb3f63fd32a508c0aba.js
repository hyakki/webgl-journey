(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{151:function(e,r){e.exports={attributes:{path:"/experiment/01-triangle",date:"2019-09-03",title:"01-triangle",slug:"01-triangle",cover:"./../images/covers/01-triangle.png"},html:'<h2>Content</h2>\n<p>Adipisicing doloremque excepturi itaque a officiis? Ducimus velit ipsam repellendus eveniet eos est. Nam quaerat voluptatum corporis in recusandae. Sapiente molestias odio nihil sequi quis Recusandae porro in similique eligendi.</p>\n<h2>Code highlights</h2>\n<pre><code class="language-js">const canvas = this.$el.querySelector(\'#canvas\');\nconst gl = canvas.getContext(\'webgl\');\n\nconst vertexShaderT = `\n    precision mediump float;\n    attribute vec2 vertPosition;\n    attribute vec3 vertColor;\n    varying vec3 fragColor;\n    void main() {\n      fragColor = vertColor;\n      gl_Position = vec4(vertPosition, 0.0, 1.0);\n    }\n  `;\n\nconst fragmentShaderT = `\n    precision mediump float;\n    varying vec3 fragColor;\n    void main() {\n      gl_FragColor = vec4(fragColor, 1.0);\n    }\n  `;\n</code></pre>\n<h3>Init</h3>\n<pre><code class="language-js">gl.clearColor(0.75, 0.85, 0.8, 1.0);\ngl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n</code></pre>\n<h3>Create shaders</h3>\n<pre><code class="language-js">const vertexShader = gl.createShader(gl.VERTEX_SHADER);\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\ngl.shaderSource(vertexShader, vertexShaderT);\ngl.shaderSource(fragmentShader, fragmentShaderT);\n</code></pre>\n<h3>Compile shaders</h3>\n<pre><code class="language-js">gl.compileShader(vertexShader);\nif (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n  console.error(\'VERTEX SHADER : COMPILE ERROR\', gl.getShaderInfoLog(vertexShader))\n}\n\ngl.compileShader(fragmentShader);\nif (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n  console.error(\'FRAGMENT SHADER : COMPILE ERROR\', gl.getShaderInfoLog(fragmentShader))\n}\n</code></pre>\n<h3>Create program</h3>\n<pre><code class="language-js">const program = gl.createProgram();\ngl.attachShader(program, vertexShader);\ngl.attachShader(program, fragmentShader);\n</code></pre>\n<h3>Link program</h3>\n<pre><code class="language-js">gl.linkProgram(program);\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n  console.error(\'LINK PROGRAM : ERROR\', gl.getProgramInfoLog(program));\n}\n</code></pre>\n<h3>Validate program</h3>\n<pre><code class="language-js">gl.validateProgram(program);\nif (!gl.getProgramParameter(program, gl.VALIDATE_STATUS)) {\n  console.error(\'VALIDATE PROGRAM : ERROR\', gl.getProgramInfoLog(program));\n}\n</code></pre>\n<h3>Create Buffer</h3>\n<pre><code class="language-js">const vertices = new Float32Array([\n  0.0, 0.5, 1.0, 1.0, 0.0,\n  -0.5, -0.5, 0.7, 0.0, 1.0,\n  0.5, -0.5, 0.1, 1.0, 0.6,\n]);\n\nconst buffer = gl.createBuffer();\n\ngl.bindBuffer(gl.ARRAY_BUFFER, buffer);\ngl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n</code></pre>\n<h3>Create positionAttribLocation</h3>\n<pre><code class="language-js">const positionAttribLocation = gl.getAttribLocation(program, \'vertPosition\');\n\ngl.vertexAttribPointer(\n  positionAttribLocation,\n  2,\n  gl.FLOAT,\n  gl.FALSE,\n  5 * Float32Array.BYTES_PER_ELEMENT,\n  0,\n);\n\ngl.enableVertexAttribArray(positionAttribLocation);\n</code></pre>\n<h3>Create colorAttribLocation</h3>\n<pre><code class="language-js">const colorAttribLocation = gl.getAttribLocation(program, \'vertColor\');\n\ngl.vertexAttribPointer(\n  colorAttribLocation,\n  3,\n  gl.FLOAT,\n  gl.FALSE,\n  5 * Float32Array.BYTES_PER_ELEMENT,\n  2 * Float32Array.BYTES_PER_ELEMENT,\n);\n\ngl.enableVertexAttribArray(colorAttribLocation);\n</code></pre>\n<h3>Use program &amp; Draw</h3>\n<pre><code class="language-js">gl.useProgram(program);\n\ngl.drawArrays(\n  gl.TRIANGLES,\n  0,\n  3,\n);\n</code></pre>\n'}}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{154:function(n,e){n.exports={attributes:{path:"/experiment/04-regl",date:"2019-09-24",title:"04-regl",slug:"04-regl",cover:"./../images/covers/04-regl.png"},html:'<h2>Content</h2>\n<h2>Code highlights</h2>\n<pre><code class="language-js">this.regl.clear({\n  color: [0.75, 0.85, 0.8, 1.0],\n  depth: 1.0,\n});\n</code></pre>\n<pre><code class="language-js">// In regl, draw operations are specified declaratively using. Each JSON\n// command is a complete description of all state. This removes the need to\n// .bind() things like buffers or shaders. All the boilerplate of setting up\n// and tearing down state is automated.\nthis.regl({\n\n  // In a draw call, we can pass the shader source code to regl\n  frag: `\n  precision mediump float;\n  uniform vec4 color;\n  void main () {\n    gl_FragColor = color;\n  }`,\n\n  vert: `\n  precision mediump float;\n  attribute vec2 position;\n  void main () {\n    gl_Position = vec4(position, 0, 1);\n  }`,\n\n  attributes: {\n    position: [\n      [0.0, 0.5],\n      [-0.5, -0.5],\n      [0.5, -0.5]\n    ]\n  },\n\n  uniforms: {\n    color: [0.27, 0.32, 0.3, 1.0],\n  },\n\n  count: 3\n})()\n</code></pre>\n<h2>Sources</h2>\n<ul>\n<li><a href="https://github.com/regl-project/regl" target="_blank">regl-project/regl (github)</a></li>\n</ul>\n'}}}]);